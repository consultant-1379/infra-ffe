---
- name: Set gateway IP, project directory and project name variables
  set_fact:
    gateway_ip: '{{ lookup("dig", deployment_id, "@" + dns_servers| join(",")) }}'
    gateway_ipv6: '{{ lookup("dig", deployment_id, "@" + dns_servers| join(","),qtype="AAAA") }}'
    project_dir: '{{ playbook_dir | replace("/ansible","")}}/deployments/vlitp/{{ deployment_id }}/'

- name: Print project directory
  debug:
    var: "{{ item }}"
  loop:
    - gateway_ip
    - project_dir
    - project

- name: Set SSH key path
  set_fact:
    ssh_key_path: "{{ project_dir  + deployment_id }}_ssh_key"

- name: Check if project directory exists
  stat:
    path: "{{ project_dir }}"
  register: stat_project_dir

- name: Is new project
  set_fact:
    is_new_project: "{{ not stat_project_dir.stat.exists }}"

- name: Create project directory
  file:
    path: "{{ project_dir }}"
    state: directory
  when: is_new_project

- name: Check if SSH key exists
  stat:
    path: "{{ ssh_key_path }}"
  register: stat_ssh_key

- name: Generate SSH Keypair
  block:
    - name: Generate SSH Key
      community.crypto.openssh_keypair:
        path: /tmp/id_ed25519
        type: ed25519
        mode: 0600
      register: ssh_key

    - name: "Encrypt SSH private key and store in {{ project_dir }}"
      copy:
        content: |
          {{ lookup("file",ssh_key.filename,rstrip=false) | vault(lookup("file",vaultfile)) }}
        dest: "{{ ssh_key_path }}"
        mode: 0600
        decrypt: false
      vars:
        vaultfile: "{{ lookup('env','ANSIBLE_VAULT_PASSWORD_FILE') }}"

    - name: "Copy SSH public key to {{ project_dir }}"
      copy:
        src: "{{ ssh_key.filename }}.pub"
        dest: "{{ ssh_key_path }}.pub"
        mode: 0644
  when: not stat_ssh_key.stat.exists

- name: Run tasks from base_volumes.yml in deploy-infra-vms role
  ansible.builtin.import_role:
    name: deploy-infra-vms
    tasks_from: base_volumes.yml

- name: Create terraform configuration from template
  template:
    src: "{{ item }}.j2"
    dest: "{{ project_dir + item }}"
  loop:
    - terraform.tfvars
    - backend.tf

- name: Copy terraform configuration files to project directory
  copy:
    src: "{{ item }}"
    dest: "{{ project_dir }}"
  loop:
    - main.tf
    - variables.tf

- name: Format Terraform files
  command: terraform fmt
  args:
    chdir: "{{ project_dir }}"

- name: "Add the {{ base_project_user }} user to the project as an admin"
  openstack.cloud.role_assignment:
    user: "{{ base_project_user }}"
    role: admin
    project: "{{ project }}"

- name: "Retrieve Project ID of {{ project }}"
  openstack.cloud.project_info:
    name: "{{ project }}"
  register: project_id

- name: Apply Terraform configuration
  community.general.terraform:
    project_path: "{{ project_dir }}"
    state: present
    force_init: true
    provider_upgrade: true
  register: terraform_apply
  no_log: false
  environment:
    PGPASSWORD: "{{ terraform_postgres_password }}"

- name: Output from applying Terraform configuration
  debug:
    msg: "{{ terraform_apply.stdout_lines  }}"

# This is needed as ansible_ssh_private_key_file: '{{ ssh_key_path }}' does not
# work in the add_host task
- name: Create temporary copy of SSH key
  copy:
    src: "{{ ssh_key_path }}"
    dest: "/tmp/{{ deployment_id }}_temp_ssh"
    mode: 0600
  register: copy_ssh_key

- name: Add gateway to inventory
  ansible.builtin.add_host:
    name: "{{ deployment_id }}"
    ansible_user: lciadm100
    ansible_ssh_private_key_file: "{{ copy_ssh_key.dest }}"
    ansible_ssh_common_args: "-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"

- name: "Wait for {{ deployment_id }}_gateway VM to be accessible over SSH"
  ansible.builtin.wait_for_connection:
    delay: 20
    sleep: 5
  delegate_to: "{{ deployment_id }}"

- name: Copy SSH key to the gateway
  copy:
    src: "{{ item }}"
    dest: /home/lciadm100/.ssh/
    mode: '{{ "0644" if "pub" in item else "0600" }}'
  delegate_to: "{{ deployment_id }}"
  loop:
    - "{{ ssh_key_path }}"
    - "{{ ssh_key_path }}.pub"

# Temporarily copy SED and DD files to /var/tmp/ on gateway. This task will be removed once integration to DMT is complete
- name: Copy SED and DD to /var/tmp/
  copy:
    src: "{{ vlitp_files }}"
    dest: /var/tmp/
  delegate_to: "{{ deployment_id }}"
  loop:
    - ENMOnRack__production_test.xml
    - MASTER_siteEngineering.txt
  loop_control:
    loop_var: vlitp_files
    label: "{{ vlitp_files }}"

- name: Copy mediator_config.json to /hwsim/etc/
  copy:
    src: mediator_config.json
    dest: /hwsim/etc/
    mode: 0644
    owner: root
    group: root
  delegate_to: "{{ deployment_id }}"
  become: yes
  
- name: Copy mediator clouds.yml.j2 template to /hwsim/etc/ on Gateway VM
  template:
    src: clouds.yml.j2
    dest: /hwsim/etc/clouds.yml
    mode: 0644
    owner: root
    group: root
  delegate_to: "{{ deployment_id }}"
  become: yes

- name: Retreive list of subnets in the cloud
  openstack.cloud.subnets_info:
  register: ostk_subs

- name: "Filter {{ deployment_id }} subnets"
  set_fact:
    subnets: "{{ ostk_subs.subnets | selectattr('name', 'match', '^' + deployment_id) | rejectattr('allocation_pools', 'eq', []) | map(attribute = 'name') | list  }}"

- name: "Remove DHCP allocation pool from {{ deployment_id }} subnets"
  shell: "openstack subnet set --no-allocation-pool {{ subs }}"
  loop: "{{ subnets }}"
  loop_control:
    loop_var: subs
    label: "{{ subs }}"

- name: Add nas to inventory
  ansible.builtin.add_host:
    name: nas
    ansible_host: 172.16.0.4
    ansible_user: support
    ansible_ssh_common_args: '-o ProxyCommand="ssh -i {{ copy_ssh_key.dest }} -W %h:%p -q lciadm100@{{ deployment_id }} -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null" -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'
    ansible_ssh_pass: "{{ nas_support_password }}"

- name: "Wait for {{ deployment_id }}_nas VM to be accessible over SSH"
  ansible.builtin.wait_for_connection:
    delay: 20
    sleep: 5
  delegate_to: nas

- name: Pause for 2 minutes to allow Vertias Cluster to start
  ansible.builtin.pause:
    minutes: 2

- name: Check if ENM Storage Pool already exists on nas_data_volume
  shell: /opt/VRTSnas/scripts/storage/pool.sh list
  register: nas_pool_list
  delegate_to: nas

- name: Create ENM Storage Pool
  block:
    - name: Run scanbus to scan all volumes connected to the NAS VM
      shell: /opt/VRTSnas/scripts/storage/scanbus.sh
      delegate_to: nas
    - name: Create ENM Storage Pool from nas_data_volume
      shell: /opt/VRTSnas/scripts/storage/pool.sh create enm nas1000_virtio0_1 metapool=no
      delegate_to: nas
  when: "'enm' not in nas_pool_list.stdout"

- name: Commit changes to git
  block:
    - name: Add project directory if newly created
      shell: "git add {{ project_dir }}"
      when: is_new_project

    # git diff returns 1 if there are changes, 0 if there are none.
    - name: Run git diff to check for changes
      shell: git diff --quiet HEAD
      args:
        chdir: "{{ project_dir }}"
      register: git_diff
      ignore_errors: true

    - name: Print git diff
      debug:
        msg: "{{ git_diff.stdout_lines }}"
    - name: Commit changes to Git repo
      shell: "git add .; git commit -m 'deployed {{ deployment_id }}'"
      args:
        chdir: "{{ project_dir }}"
      register: git_commit
      when: git_diff.rc|int == 1
  tags:
    - git
